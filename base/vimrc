" 显示行号
set number

" 启动时隐去援助提示
set shortmess=atI

" 语法高亮
syntax on

" 不需要备份
set nobackup

" 不与 vi 进行兼容
set nocompatible

" 没有保存或文件只读时弹出确认
set confirm

" 鼠标可用, a 为 vim 模式此时支持鼠标滚轮, v 为鼠标选中模式不支持鼠标滚轮
set mouse=a

" tab 缩进,空格长度为4
set tabstop=4
" 设置程序自动缩进时所占的空格长度，最好设置为与tabstop相同
set shiftwidth=4
" 在开启expantab后，需要设置使用退格键（backspace）时删除的空格数
set softtabstop=4
" 将输入的tab展开成空格，如果要使用tab，输入ctrl＋v
set expandtab
"set smarttab

" 文件自动检测外部更改
set autoread

" c 文件自动缩进
set cindent

" 自动对齐
set autoindent

" 智能缩进
set smartindent

" 高亮查找匹配
set hlsearch

" 显示匹配
set showmatch

" 显示标尺，就是在右下角显示光标位置
set ruler

" 设置键盘映射，通过空格设置折叠
nnoremap <space> @=((foldclosed(line('.')<0)?'zc':'zo'))<CR>

" 不要闪烁
set novisualbell

" 启动显示状态行
set laststatus=2

" 浅色显示当前行
autocmd InsertLeave * se nocul

" 用浅色高亮当前行
autocmd InsertEnter * se cul

" 显示输入的命令
set showcmd

" 被分割窗口之间显示空白
set fillchars=vert:/
set fillchars=stl:/
set fillchars=stlnc:/

" vundle 环境设置
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
"vundle管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间
call vundle#begin()
Plugin 'dyng/ctrlsf.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'fatih/vim-go'
Plugin 'majutsushi/tagbar'
Plugin 'Lokaltog/vim-powerline'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'Raimondi/delimitMate'
Plugin 'jnurmine/Zenburn'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
" 插件列表结束
call vundle#end()
filetype plugin indent on

" 配色方案
set background=dark
colorscheme Zenburn

" 禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T

" 总是显示状态栏
set laststatus=2

" 禁止折行
set nowrap

" 设置状态栏主题风格
let g:Powerline_colorscheme='solarized256'

syntax keyword cppSTLtype initializer_list

" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax

" 启动 vim 时关闭折叠代码
set nofoldenable

"允许用退格键删除字符
set backspace=indent,eol,start

"编码设置
set encoding=utf-8

"共享剪切板
set clipboard=unnamed

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup

" ************************************************************************************
" 自动补全配置项
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_server_python_interpreter='/usr/local/bin/python3'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
set completeopt=menu,menuone

let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }
let g:ycm_filetype_whitelist = {
            \ "c":1,
            \ "py":1,
            \ "go":1,
            \ "vue":1,
            \ "cpp":1,
            \ "objc":1,
            \ "sh":1,
            \ "zsh":1,
            \ "zimbu":1,
            \ }
" ************************************************************************************

" 去掉暂时退出 vim 窗口快捷键
"noremap <c-z> <NOP>

" 换行的时候可以自动跳到下一行
imap {<CR> {<CR>}<ESC>O

" 创建新的小窗口
set splitbelow
set splitright

" split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" ************************************************************************************
" 关闭NERDTree快捷键
map <leader>t :NERDTreeToggle<CR>

" 当NERDTree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" 修改树的显示图标
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
let NERDTreeAutoCenter=1

" 显示行号
let NERDTreeShowLineNumbers=1

" 是否显示隐藏文件
let NERDTreeShowHidden=1

" 设置宽度
let NERDTreeWinSize=25

" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1

" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
"let g:NERDTreeIndicatorMapCustom = {
"    \ "Modified"  : "✹",
"    \ "Staged"    : "✚",
"    \ "Untracked" : "✭",
"    \ "Renamed"   : "➜",
"    \ "Unmerged"  : "═",
"    \ "Deleted"   : "✖",
"    \ "Dirty"     : "✗",
"    \ "Clean"     : "✔︎",
"    \ 'Ignored'   : '☒',
"    \ "Unknown"   : "?"
"    \ }
" ************************************************************************************

" 记录上一次编辑位置
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" 选中所有高亮可以通过 S + 3
" 取消所有高亮可以输入 :noh
" 添加行号输入 set number, 取消行号输入 set nonumber

" 以下配置避免了删除时导入剪切板操作
nnoremap x "_x
nnoremap X "_X
nnoremap d "_d
nnoremap dd "_dd
nnoremap D "_D
vnoremap d "_d
vnoremap dd "_dd

nnoremap <leader>x ""x
nnoremap <leader>X ""X
nnoremap <leader>d ""d
nnoremap <leader>dd ""dd
nnoremap <leader>D ""D
vnoremap <leader>d ""d
vnoremap <leader>dd ""dd

" vim-go
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1
let g:godef_split=2
let g:tagbar_ctags_bin='/usr/local/Cellar/ctags/5.8_1/bin/ctags'
autocmd BufReadPost *.go,*.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

" 去掉 vim-go 初始化提示
let g:go_gopls_enabled = 1

" vim-godef
" go 函数跳转
"autocmd FileType go nnoremap <buffer> gd :call GodefUnderCursor()<cr>
"autocmd FileType go nnoremap <buffer> <C-]> :call GodefUnderCursor()<cr>

" tagbar
" 又窗口函数列表
nmap <Leader>tb :TagbarToggle<CR>  " 将开启tagbar的快捷键设置为　<Leader>tb
"nmap <F9> :TagbarToggle<CR>
let g:tagbar_width=45
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" 上半翻页 Ctrl + d
" 下班翻页 Ctrl + u

" Flagging Unnecessary Whitespace
" http://stackoverflow.com/questions/11087041/gvim-to-custom-highlight-group-in-vimrc-not-working
"hi BadWhitespace guifg=gray guibg=red ctermfg=gray ctermbg=red
"highlight BadWhitespace ctermfg=16 ctermbg=253 guifg=#000000 guibg=#F8F8F0

" 标示不必要的空白字符
"autocmd BufRead,BufNewFile *.go,*.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
highlight BadWhitespace term=standout ctermbg=red guibg=red
match BadWhitespace /\s\+$\| \+\t/

" tags 无法找到
set tags=tags;
set autochdir
